{"ast":null,"code":"import { filter, switchMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthGuardWithForcedLogin {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  canActivate(route, state) {\n    return this.authService.isDoneLoading$.pipe(filter(isDone => isDone), switchMap(_ => this.authService.isAuthenticated$), tap(isAuthenticated => isAuthenticated || this.authService.login(state.url)));\n  }\n  static #_ = this.ɵfac = function AuthGuardWithForcedLogin_Factory(t) {\n    return new (t || AuthGuardWithForcedLogin)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuardWithForcedLogin,\n    factory: AuthGuardWithForcedLogin.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,MAAM,EAAEC,SAAS,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKvD,OAAM,MAAOC,wBAAwB;EAGnCC,YACUC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAErB;EAEAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,OAAO,IAAI,CAACH,WAAW,CAACI,cAAc,CAACC,IAAI,CACzCV,MAAM,CAACW,MAAM,IAAIA,MAAM,CAAC,EACxBV,SAAS,CAACW,CAAC,IAAI,IAAI,CAACP,WAAW,CAACQ,gBAAgB,CAAC,EACjDX,GAAG,CAACY,eAAe,IAAIA,eAAe,IAAI,IAAI,CAACT,WAAW,CAACU,KAAK,CAACP,KAAK,CAACQ,GAAG,CAAC,CAAC,CAC7E;EACH;EAAC;qBAjBUb,wBAAwB;EAAA;EAAA;WAAxBA,wBAAwB;IAAAc,SAAxBd,wBAAwB;EAAA","names":["filter","switchMap","tap","AuthGuardWithForcedLogin","constructor","authService","canActivate","route","state","isDoneLoading$","pipe","isDone","_","isAuthenticated$","isAuthenticated","login","url","factory"],"sourceRoot":"","sources":["/home/david/perso/home-api/apps/server-manager/front/app/core/auth-guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuardWithForcedLogin implements CanActivate {\n\n\n  constructor(\n    private authService: AuthService,\n  ) {\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot,\n  ): Observable<boolean> {\n    return this.authService.isDoneLoading$.pipe(\n      filter(isDone => isDone),\n      switchMap(_ => this.authService.isAuthenticated$),\n      tap(isAuthenticated => isAuthenticated || this.authService.login(state.url)),\n    );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}