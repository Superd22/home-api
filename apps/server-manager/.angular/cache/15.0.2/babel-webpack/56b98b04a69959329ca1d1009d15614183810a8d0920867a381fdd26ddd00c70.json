{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport * as Apollo from 'apollo-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nexport var VpnRegion;\n(function (VpnRegion) {\n  VpnRegion[\"Au\"] = \"au\";\n  VpnRegion[\"Ca\"] = \"ca\";\n  VpnRegion[\"Ch\"] = \"ch\";\n  VpnRegion[\"Uk\"] = \"uk\";\n  VpnRegion[\"Us\"] = \"us\";\n})(VpnRegion || (VpnRegion = {}));\nexport var WakableNodes;\n(function (WakableNodes) {\n  WakableNodes[\"Desktop\"] = \"Desktop\";\n})(WakableNodes || (WakableNodes = {}));\nexport const GetNodesDocument = gql`\n    query getNodes {\n  nodes {\n    name\n    online\n  }\n}\n    `;\nexport class GetNodesGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = GetNodesDocument;\n  }\n  static #_ = this.ɵfac = function GetNodesGQL_Factory(t) {\n    return new (t || GetNodesGQL)(i0.ɵɵinject(i1.Apollo));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetNodesGQL,\n    factory: GetNodesGQL.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,OAAO,KAAKC,MAAM,MAAM,gBAAgB;;;AAsExC,WAAYC,SAMX;AAND,WAAYA,SAAS;EACnBA,sBAAS;EACTA,sBAAS;EACTA,sBAAS;EACTA,sBAAS;EACTA,sBAAS;AACX,CAAC,EANWA,SAAS,KAATA,SAAS;AAQrB,WAAYC,YAEX;AAFD,WAAYA,YAAY;EACtBA,mCAAmB;AACrB,CAAC,EAFWA,YAAY,KAAZA,YAAY;AAiBxB,OAAO,MAAMC,gBAAgB,GAAGJ,GAAG;;;;;;;KAO9B;AAKH,OAAM,MAAOK,WAAY,SAAQJ,MAAM,CAACK,KAA4C;EAGlFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,aAAQ,GAAGJ,gBAAgB;EAI3B;EAAC;qBALUC,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAI,SAAXJ,WAAW;IAAAK,YAFV;EAAM","names":["gql","Apollo","VpnRegion","WakableNodes","GetNodesDocument","GetNodesGQL","Query","constructor","apollo","factory","providedIn"],"sourceRoot":"","sources":["/home/david/perso/home-api/apps/server-manager/front/app/state/gql.ts"],"sourcesContent":["import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Game = {\n  __typename?: 'Game';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  online: Scalars['Boolean'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  connectVPN: Nordvpn;\n  turnOffServer: Scalars['Boolean'];\n  turnOnServer: Scalars['Boolean'];\n  wakeNode: WakeResult;\n};\n\n\nexport type MutationConnectVpnArgs = {\n  region: VpnRegion;\n};\n\n\nexport type MutationTurnOffServerArgs = {\n  gameId: Scalars['ID'];\n};\n\n\nexport type MutationTurnOnServerArgs = {\n  gameId: Scalars['ID'];\n};\n\n\nexport type MutationWakeNodeArgs = {\n  id: WakableNodes;\n};\n\nexport type Node = {\n  __typename?: 'Node';\n  name: Scalars['ID'];\n  online: Scalars['Boolean'];\n};\n\nexport type Nordvpn = {\n  __typename?: 'Nordvpn';\n  region: Scalars['String'];\n  serverName: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  games: Array<Game>;\n  nodes: Array<Node>;\n  test: Scalars['String'];\n  version: Scalars['String'];\n};\n\nexport enum VpnRegion {\n  Au = 'au',\n  Ca = 'ca',\n  Ch = 'ch',\n  Uk = 'uk',\n  Us = 'us'\n}\n\nexport enum WakableNodes {\n  Desktop = 'Desktop'\n}\n\nexport type WakeResult = {\n  __typename?: 'WakeResult';\n  /** Wether or not the node is currently active. */\n  active: Scalars['Boolean'];\n  error?: Maybe<Scalars['String']>;\n  success: Scalars['Boolean'];\n};\n\nexport type GetNodesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetNodesQuery = { __typename?: 'Query', nodes: Array<{ __typename?: 'Node', name: string, online: boolean }> };\n\nexport const GetNodesDocument = gql`\n    query getNodes {\n  nodes {\n    name\n    online\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetNodesGQL extends Apollo.Query<GetNodesQuery, GetNodesQueryVariables> {\n    document = GetNodesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }"]},"metadata":{},"sourceType":"module","externalDependencies":[]}