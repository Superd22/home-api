{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant } from \"../globals/index.js\";\nimport { visit } from 'graphql';\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition } from \"./getFromAST.js\";\nimport { filterInPlace } from \"../common/filterInPlace.js\";\nimport { isField, isInlineFragment } from \"./storeUtils.js\";\nimport { createFragmentMap } from \"./fragments.js\";\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\nfunction isEmpty(op, fragmentMap) {\n  return !op || op.selectionSet.selections.every(function (selection) {\n    return selection.kind === 'FragmentSpread' && isEmpty(fragmentMap[selection.name.value], fragmentMap);\n  });\n}\nfunction nullIfDocIsEmpty(doc) {\n  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);\n    });\n  };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n  var variablesInUse = Object.create(null);\n  var variablesToRemove = [];\n  var fragmentSpreadsInUse = Object.create(null);\n  var fragmentSpreadsToRemove = [];\n  var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n    Variable: {\n      enter: function (node, _key, parent) {\n        if (parent.kind !== 'VariableDefinition') {\n          variablesInUse[node.name.value] = true;\n        }\n      }\n    },\n    Field: {\n      enter: function (node) {\n        if (directives && node.directives) {\n          var shouldRemoveField = directives.some(function (directive) {\n            return directive.remove;\n          });\n          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {\n            if (node.arguments) {\n              node.arguments.forEach(function (arg) {\n                if (arg.value.kind === 'Variable') {\n                  variablesToRemove.push({\n                    name: arg.value.name.value\n                  });\n                }\n              });\n            }\n            if (node.selectionSet) {\n              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                fragmentSpreadsToRemove.push({\n                  name: frag.name.value\n                });\n              });\n            }\n            return null;\n          }\n        }\n      }\n    },\n    FragmentSpread: {\n      enter: function (node) {\n        fragmentSpreadsInUse[node.name.value] = true;\n      }\n    },\n    Directive: {\n      enter: function (node) {\n        if (getDirectiveMatcher(directives)(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n  if (modifiedDoc && filterInPlace(variablesToRemove, function (v) {\n    return !!v.name && !variablesInUse[v.name];\n  }).length) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function (fs) {\n    return !!fs.name && !fragmentSpreadsInUse[fs.name];\n  }).length) {\n    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n  }\n  return modifiedDoc;\n}\nexport var addTypenameToDocument = Object.assign(function (doc) {\n  return visit(doc, {\n    SelectionSet: {\n      enter: function (node, _key, parent) {\n        if (parent && parent.kind === 'OperationDefinition') {\n          return;\n        }\n        var selections = node.selections;\n        if (!selections) {\n          return;\n        }\n        var skip = selections.some(function (selection) {\n          return isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);\n        });\n        if (skip) {\n          return;\n        }\n        var field = parent;\n        if (isField(field) && field.directives && field.directives.some(function (d) {\n          return d.name.value === 'export';\n        })) {\n          return;\n        }\n        return __assign(__assign({}, node), {\n          selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false)\n        });\n      }\n    }\n  });\n}, {\n  added: function (field) {\n    return field === TYPENAME_FIELD;\n  }\n});\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        __DEV__ && invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n    return willRemove;\n  }\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n  return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n  if (!isField(selection)) {\n    return true;\n  }\n  if (!selection.directives) {\n    return false;\n  }\n  return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\nfunction getArgumentMatcher(config) {\n  return function argumentMatcher(argument) {\n    return config.some(function (aConfig) {\n      return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n    });\n  };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n  var argMatcher = getArgumentMatcher(config);\n  return nullIfDocIsEmpty(visit(doc, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n            return !config.some(function (arg) {\n              return arg.name === varDef.variable.name.value;\n            });\n          }) : []\n        });\n      }\n    },\n    Field: {\n      enter: function (node) {\n        var shouldRemoveField = config.some(function (argConfig) {\n          return argConfig.remove;\n        });\n        if (shouldRemoveField) {\n          var argMatchCount_1 = 0;\n          if (node.arguments) {\n            node.arguments.forEach(function (arg) {\n              if (argMatcher(arg)) {\n                argMatchCount_1 += 1;\n              }\n            });\n          }\n          if (argMatchCount_1 === 1) {\n            return null;\n          }\n        }\n      }\n    },\n    Argument: {\n      enter: function (node) {\n        if (argMatcher(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n  function enter(node) {\n    if (config.some(function (def) {\n      return def.name === node.name.value;\n    })) {\n      return null;\n    }\n  }\n  return nullIfDocIsEmpty(visit(doc, {\n    FragmentSpread: {\n      enter: enter\n    },\n    FragmentDefinition: {\n      enter: enter\n    }\n  }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n  var allFragments = [];\n  selectionSet.selections.forEach(function (selection) {\n    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) {\n        return allFragments.push(frag);\n      });\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n  return allFragments;\n}\nexport function buildQueryFromSelectionSet(document) {\n  var definition = getMainDefinition(document);\n  var definitionOperation = definition.operation;\n  if (definitionOperation === 'query') {\n    return document;\n  }\n  var modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          operation: 'query'\n        });\n      }\n    }\n  });\n  return modifiedDoc;\n}\nexport function removeClientSetsFromDocument(document) {\n  checkDocument(document);\n  var modifiedDoc = removeDirectivesFromDocument([{\n    test: function (directive) {\n      return directive.name.value === 'client';\n    },\n    remove: true\n  }], document);\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter: function (node) {\n          if (node.selectionSet) {\n            var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n              return isField(selection) && selection.name.value === '__typename';\n            });\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        }\n      }\n    });\n  }\n  return modifiedDoc;\n}","map":{"version":3,"names":["__assign","__spreadArray","invariant","visit","checkDocument","getOperationDefinition","getFragmentDefinition","getFragmentDefinitions","getMainDefinition","filterInPlace","isField","isInlineFragment","createFragmentMap","TYPENAME_FIELD","kind","name","value","isEmpty","op","fragmentMap","selectionSet","selections","every","selection","nullIfDocIsEmpty","doc","getDirectiveMatcher","directives","directiveMatcher","directive","some","dir","test","removeDirectivesFromDocument","variablesInUse","Object","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","Variable","enter","node","_key","parent","Field","shouldRemoveField","remove","arguments","forEach","arg","push","getAllFragmentSpreadsFromSelectionSet","frag","FragmentSpread","Directive","v","length","removeArgumentsFromDocument","fs","removeFragmentSpreadFromDocument","addTypenameToDocument","assign","SelectionSet","skip","lastIndexOf","field","d","added","connectionRemoveConfig","willRemove","__DEV__","warn","removeConnectionDirectiveFromDocument","hasDirectivesInSelectionSet","nestedCheck","hasDirectivesInSelection","getArgumentMatcher","config","argumentMatcher","argument","aConfig","argMatcher","OperationDefinition","variableDefinitions","filter","varDef","variable","argConfig","argMatchCount_1","Argument","def","FragmentDefinition","allFragments","buildQueryFromSelectionSet","document","definition","definitionOperation","operation","removeClientSetsFromDocument","isTypenameOnly"],"sources":["/home/david/perso/home-api/node_modules/@apollo/client/utilities/graphql/transform.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { invariant } from \"../globals/index.js\";\nimport { visit, } from 'graphql';\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition, } from \"./getFromAST.js\";\nimport { filterInPlace } from \"../common/filterInPlace.js\";\nimport { isField, isInlineFragment } from \"./storeUtils.js\";\nimport { createFragmentMap, } from \"./fragments.js\";\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragmentMap) {\n    return !op || op.selectionSet.selections.every(function (selection) { return selection.kind === 'FragmentSpread' &&\n        isEmpty(fragmentMap[selection.name.value], fragmentMap); });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !!v.name && !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !!fs.name && !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nexport var addTypenameToDocument = Object.assign(function (doc) {\n    return visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === 'export'; })) {\n                    return;\n                }\n                return __assign(__assign({}, node), { selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false) });\n            },\n        },\n    });\n}, {\n    added: function (field) {\n        return field === TYPENAME_FIELD;\n    },\n});\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                __DEV__ && invariant.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (!!selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) : [] });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function (arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((isField(selection) || isInlineFragment(selection)) &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nexport function buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nexport function removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return isField(selection) && selection.name.value === '__typename';\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}