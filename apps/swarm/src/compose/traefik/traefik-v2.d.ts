/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Traefik v2 YAML Config schema
 */
export interface TraefikV2 {
  global?: {
    checkNewVersion?: boolean;
    sendAnonymousUsage?: boolean;
    [k: string]: unknown;
  };
  serversTransport?: {
    insecureSkipVerify?: boolean;
    rootCAs?: string[];
    maxIdleConnsPerHost?: number;
    forwardingTimeouts?: {
      dialTimeout?: number;
      responseHeaderTimeout?: number;
      idleConnTimeout?: number;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  entryPoints?: {
    [k: string]: Entrypoint;
  };
  providers?: {
    providersThrottleDuration?: number;
    docker?: ProviderDocker | true;
    file?: ProviderFile;
    kubernetesIngress?: ProviderKubernetesIngress;
    kubernetesCRD?: ProviderKubernetesCrd;
    rest?: ProviderRest;
    rancher?: ProviderRancher;
    consulCatalog?: ProviderConsulCatalog;
    consul?: ProviderConsul;
    etcd?: ProviderEtcd;
    zooKeeper?: ProviderZookeeper;
    redis?: ProviderRedis;
    [k: string]: unknown;
  };
  api?: {
    insecure?: boolean;
    dashboard?: boolean;
    debug?: boolean;
    [k: string]: unknown;
  };
  metrics?: {
    prometheus?: MetricPrometheus;
    datadog?: MetricDatadog;
    statsD?: MetricStatsd;
    influxDB?: MetricInfluxdb;
    [k: string]: unknown;
  };
  ping?: {
    entryPoint?: string;
    manualRouting?: boolean;
    [k: string]: unknown;
  };
  log?: {
    level?: string;
    filePath?: string;
    format?: string;
    [k: string]: unknown;
  };
  accessLog?: {
    filePath?: string;
    format?: string;
    filters?: {
      statusCodes?: string[];
      retryAttempts?: boolean;
      minDuration?: number;
      [k: string]: unknown;
    };
    fields?: {
      defaultMode?: string;
      names?: {
        name0?: string;
        name1?: string;
        [k: string]: unknown;
      };
      headers?: {
        defaultMode?: string;
        names?: {
          name0?: string;
          name1?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    bufferingSize?: number;
    [k: string]: unknown;
  };
  tracing?: {
    serviceName?: string;
    spanNameLimit?: number;
    jaeger?: TracingJaeger;
    zipkin?: TracingZipkin;
    datadog?: TracingDatadog;
    instana?: TracingInstana;
    haystack?: TracingHaystack;
    elastic?: TracingElastic;
    [k: string]: unknown;
  };
  hostResolver?: {
    cnameFlattening?: boolean;
    resolvConfig?: string;
    resolvDepth?: number;
    [k: string]: unknown;
  };
  certificatesResolvers?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[a-zA-Z]".
     */
    [k: string]: {
      acme?: {
        email?: string;
        caServer?: string;
        storage?: string;
        keyType?: string;
        dnsChallenge?: {
          provider?: string;
          delayBeforeCheck?: number;
          resolvers?: string[];
          disablePropagationCheck?: boolean;
          [k: string]: unknown;
        };
        httpChallenge?: {
          entryPoint?: string;
          [k: string]: unknown;
        };
        tlsChallenge?: true | {
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[a-zA-Z0-9_-]".
 */
export interface Entrypoint {
  address?: string;
  transport?: {
    lifeCycle?: {
      requestAcceptGraceTimeout?: number;
      graceTimeOut?: number;
      [k: string]: unknown;
    };
    respondingTimeouts?: {
      readTimeout?: number;
      writeTimeout?: number;
      idleTimeout?: number;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  proxyProtocol?: {
    insecure?: boolean;
    trustedIPs?: string[];
    [k: string]: unknown;
  };
  forwardedHeaders?: {
    insecure?: boolean;
    trustedIPs?: string[];
    [k: string]: unknown;
  };
  http?: {
    redirections?: {
      entryPoint?: {
        to?: string;
        scheme?: string;
        permanent?: boolean;
        priority?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    middlewares?: string[];
    tls?: {
      options?: string;
      certResolver?: string;
      domains?: {
        main?: string;
        sans?: string[];
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface ProviderDocker {
  constraints?: string;
  watch?: boolean;
  endpoint?: string;
  defaultRule?: string;
  tls?: {
    ca?: string;
    caOptional?: boolean;
    cert?: string;
    key?: string;
    insecureSkipVerify?: boolean;
    [k: string]: unknown;
  };
  exposedByDefault?: boolean;
  useBindPortIP?: boolean;
  swarmMode?: boolean;
  network?: string;
  swarmModeRefreshSeconds?: number;
  [k: string]: unknown;
}
export interface ProviderFile {
  directory?: string;
  watch?: boolean;
  filename?: string;
  debugLogGeneratedTemplate?: boolean;
  [k: string]: unknown;
}
export interface ProviderKubernetesIngress {
  endpoint?: string;
  token?: string;
  certAuthFilePath?: string;
  disablePassHostHeaders?: boolean;
  namespaces?: string[];
  labelSelector?: string;
  ingressClass?: string;
  throttleDuration?: string;
  ingressEndpoint?: {
    ip?: string;
    hostname?: string;
    publishedService?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface ProviderKubernetesCrd {
  endpoint?: string;
  token?: string;
  certAuthFilePath?: string;
  disablePassHostHeaders?: boolean;
  namespaces?: string[];
  labelSelector?: string;
  ingressClass?: string;
  throttleDuration?: string;
  [k: string]: unknown;
}
export interface ProviderRest {
  insecure?: boolean;
  [k: string]: unknown;
}
export interface ProviderRancher {
  constraints?: string;
  watch?: boolean;
  defaultRule?: string;
  exposedByDefault?: boolean;
  enableServiceHealthFilter?: boolean;
  refreshSeconds?: number;
  intervalPoll?: boolean;
  prefix?: string;
  [k: string]: unknown;
}
export interface ProviderConsulCatalog {
  constraints?: string;
  prefix?: string;
  refreshInterval?: string;
  requireConsistent?: boolean;
  stale?: boolean;
  cache?: boolean;
  exposedByDefault?: boolean;
  defaultRule?: string;
  endpoint?: {
    address?: string;
    scheme?: string;
    datacenter?: string;
    token?: string;
    endpointWaitTime?: string;
    tls?: {
      ca?: string;
      caOptional?: boolean;
      cert?: string;
      key?: string;
      insecureSkipVerify?: boolean;
      [k: string]: unknown;
    };
    httpAuth?: {
      username?: string;
      password?: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface ProviderConsul {
  rootKey?: string;
  endpoints?: string[];
  username?: string;
  password?: string;
  tls?: {
    ca?: string;
    caOptional?: boolean;
    cert?: string;
    key?: string;
    insecureSkipVerify?: boolean;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface ProviderEtcd {
  rootKey?: string;
  endpoints?: string[];
  username?: string;
  password?: string;
  tls?: {
    ca?: string;
    caOptional?: boolean;
    cert?: string;
    key?: string;
    insecureSkipVerify?: boolean;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface ProviderZookeeper {
  rootKey?: string;
  endpoints?: string[];
  username?: string;
  password?: string;
  tls?: {
    ca?: string;
    caOptional?: boolean;
    cert?: string;
    key?: string;
    insecureSkipVerify?: boolean;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface ProviderRedis {
  rootKey?: string;
  endpoints?: string[];
  username?: string;
  password?: string;
  tls?: {
    ca?: string;
    caOptional?: boolean;
    cert?: string;
    key?: string;
    insecureSkipVerify?: boolean;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface MetricPrometheus {
  buckets?: number[];
  addEntryPointsLabels?: boolean;
  addServicesLabels?: boolean;
  entryPoint?: string;
  manualRouting?: boolean;
  [k: string]: unknown;
}
export interface MetricDatadog {
  address?: string;
  pushInterval?: number;
  addEntryPointsLabels?: boolean;
  addServicesLabels?: boolean;
  [k: string]: unknown;
}
export interface MetricStatsd {
  address?: string;
  pushInterval?: number;
  addEntryPointsLabels?: boolean;
  addServicesLabels?: boolean;
  prefix?: string;
  [k: string]: unknown;
}
export interface MetricInfluxdb {
  address?: string;
  protocol?: string;
  pushInterval?: number;
  database?: string;
  retentionPolicy?: string;
  username?: string;
  password?: string;
  addEntryPointsLabels?: boolean;
  addServicesLabels?: boolean;
  [k: string]: unknown;
}
export interface TracingJaeger {
  samplingServerURL?: string;
  samplingType?: string;
  samplingParam?: number;
  localAgentHostPort?: string;
  gen128Bit?: boolean;
  propagation?: string;
  traceContextHeaderName?: string;
  collector?: {
    endpoint?: string;
    user?: string;
    password?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface TracingZipkin {
  httpEndpoint?: string;
  sameSpan?: boolean;
  id128Bit?: boolean;
  sampleRate?: number;
  [k: string]: unknown;
}
export interface TracingDatadog {
  localAgentHostPort?: string;
  globalTag?: string;
  debug?: boolean;
  prioritySampling?: boolean;
  traceIDHeaderName?: string;
  parentIDHeaderName?: string;
  samplingPriorityHeaderName?: string;
  bagagePrefixHeaderName?: string;
  [k: string]: unknown;
}
export interface TracingInstana {
  localAgentHost?: string;
  localAgentPort?: number;
  logLevel?: string;
  [k: string]: unknown;
}
export interface TracingHaystack {
  localAgentHost?: string;
  localAgentPort?: number;
  globalTag?: string;
  traceIDHeaderName?: string;
  parentIDHeaderName?: string;
  spanIDHeaderName?: string;
  baggagePrefixHeaderName?: string;
  [k: string]: unknown;
}
export interface TracingElastic {
  serverURL?: string;
  secretToken?: string;
  serviceEnvironment?: string;
  [k: string]: unknown;
}
