diff --git a/node_modules/@nrwl/esbuild/src/executors/esbuild/esbuild.impl.js b/node_modules/@nrwl/esbuild/src/executors/esbuild/esbuild.impl.js
index fe539a1..8f0db0a 100644
--- a/node_modules/@nrwl/esbuild/src/executors/esbuild/esbuild.impl.js
+++ b/node_modules/@nrwl/esbuild/src/executors/esbuild/esbuild.impl.js
@@ -6,6 +6,7 @@ require("dotenv/config");
 const chalk = require("chalk");
 const devkit_1 = require("@nrwl/devkit");
 const js_1 = require("@nrwl/js");
+const fs = require("fs");
 const esbuild = require("esbuild");
 const normalize_1 = require("./lib/normalize");
 const fs_extra_1 = require("fs-extra");
@@ -46,7 +47,42 @@ function esbuildExecutor(_options, context) {
             cpjOptions.overrideDependencies = externalDependencies;
         }
         else {
-            cpjOptions.extraDependencies = externalDependencies;
+            const mainpjson = require(process.cwd() + '/package.json');
+            const availables = [...Object.entries(mainpjson.dependencies || {}), ...Object.entries(mainpjson.devDependencies || {})];
+            for (const dep of externalDependencies) {
+                try {
+                    const pjson = JSON.parse(
+                        fs.readFileSync("node_modules/"+dep.node.data.packageName + '/package.json', { encoding: 'utf-8' }),
+                    );
+                    for(const wantedPeer of Object.keys(pjson.peerDependencies || {})) {
+                        // @todo handle versions
+                        const peerInstalled = availables.find(([name, version]) => name === wantedPeer);
+                        if (!peerInstalled) {
+                            console.warn(`${chalk.yellow(wantedPeer)} is not available, skipping...`);
+                            // throw new Error('Cannot find peer dependency ' + wantedPeer + ' in package.json for package ' + dep.node.data.packageName);
+                        } else {
+
+                            if (externalDependencies.find((dep) => dep.name === 'npm:'+peerInstalled[0])) continue;
+                            const {version} = JSON.parse(
+                                fs.readFileSync("node_modules/"+peerInstalled[0] + '/package.json', { encoding: 'utf-8' })
+                            )
+                            externalDependencies.push({
+                                name: 'npm:'+peerInstalled[0],
+                                node: {
+                                    data: {
+                                        packageName: peerInstalled[0],
+                                        version,
+                                    }
+                                }
+                            })
+                        }
+                    }
+                } catch(e) {
+                    console.error("oh no", e)
+                }
+            }
+            
+            cpjOptions.extraDependencies = externalDependencies.sort((a, b) => a.name.localeCompare(b.name));
         }
         const packageJsonResult = yield tslib_1.__await((0, js_1.copyPackageJson)(cpjOptions, context));
         if (options.watch) {
diff --git a/node_modules/@nrwl/esbuild/src/executors/esbuild/lib/build-esbuild-options.js b/node_modules/@nrwl/esbuild/src/executors/esbuild/lib/build-esbuild-options.js
index 8db5d9c..e6e6fde 100644
--- a/node_modules/@nrwl/esbuild/src/executors/esbuild/lib/build-esbuild-options.js
+++ b/node_modules/@nrwl/esbuild/src/executors/esbuild/lib/build-esbuild-options.js
@@ -9,7 +9,8 @@ const CJS_FILE_EXTENSION = '.cjs';
 function buildEsbuildOptions(format, options, context) {
     const esbuildOptions = Object.assign(Object.assign({}, options.esbuildOptions), { entryPoints: options.additionalEntryPoints
             ? [options.main, ...options.additionalEntryPoints]
-            : [options.main], entryNames: options.outputHashing === 'all' ? '[dir]/[name].[hash]' : '[dir]/[name]', bundle: true, external: options.external, minify: options.minify, platform: options.platform, target: options.target, metafile: options.metafile, tsconfig: options.tsConfig, format, outExtension: { '.js': getOutExtension(format) } });
+            : [options.main], entryNames: options.outputHashing === 'all' ? '[dir]/[name].[hash]' : '[dir]/[name]', bundle: true, external: options.external, minify: options.minify, platform: options.platform, target: options.target, metafile: options.metafile, tsconfig: options.tsConfig, format, outExtension: { '.js': getOutExtension(format) } }
+            , options.esbuildConfigFile ? require( process.cwd() + '/'+options.esbuildConfigFile) : {});
     if (options.platform === 'browser') {
         esbuildOptions.define = (0, environment_variables_1.getClientEnvironment)();
     }
